@model SedesOlimpicas.Models.SedeDto
@{
    ViewBag.Title = "CrearEditarSede";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>
    @if (Model.IdSede > 0)
    {
        <span>Editar Sede</span>
    }
    else
    {
        <span>Crear Sede</span>
    }
</h2>
<hr />

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "formularioSede" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group hidden">
            <label class="col-md-2">Id Sede</label>
            <div class="col-md-10">
                @Html.EditorFor(model => model.IdSede, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.IdSede, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <label class="col-md-2">Nombre</label>
            <div class="col-md-10">
                @Html.EditorFor(model => model.Nombre, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Nombre, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <label class="col-md-2">Nro. de Complejos</label>
            <div class="col-md-10">
                @if (Model.IdSede > 0)
                {
                    @Html.EditorFor(model => model.NroComplejos, new { htmlAttributes = new { disabled = "disabled", @class = "form-control" } })
                }
                else
                {
                    @Html.EditorFor(model => model.NroComplejos, new { htmlAttributes = new { @class = "form-control" } })
                }
                @Html.ValidationMessageFor(model => model.NroComplejos, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <label class="col-md-2">Presupuesto</label>
            <div class="col-md-10">
                @if (Model.IdSede > 0)
                {
                    @Html.EditorFor(model => model.Presupuesto, new { htmlAttributes = new { disabled = "disabled", @class = "form-control" } })
                }
                else
                {
                    @Html.EditorFor(model => model.Presupuesto, new { htmlAttributes = new { @class = "form-control" } })
                }
                @Html.ValidationMessageFor(model => model.Presupuesto, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <a class="btn btn-primary" id="guardarCambios"><i class="fa fa-floppy-o"></i>&nbsp;&nbsp;Guardar</a>
                &nbsp;&nbsp;
                <a class="btn btn-danger" href="@Url.Action("Index")"><i class="fa fa-times"></i>&nbsp;&nbsp;Cancelar</a>
            </div>
        </div>
    </div>
}
@section Styles{
    @Styles.Render("~/sweetAlertStyles")
}
@section Scripts{
    @Scripts.Render("~/sweetAlert")
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(document).ready(function () {
            $(document).on("click", "#guardarCambios", function () {
                if ($("#formularioSede").valid()) {
                    const sede = {
                        IdSede: $("#IdSede").val(),
                        Nombre: $("#Nombre").val(),
                        NroComplejos: $("#NroComplejos").val(),
                        Presupuesto: $("#Presupuesto").val()
                    };
                    $.ajax({
                        contentType: 'application/json',
                        type: 'POST',
                        url: '@Url.Action("CrearEditarSede")',
                        data: JSON.stringify(sede),
                        dataType: "json",
                        success: function (result) {
                            if (result) {
                                swal({
                                    title: "Sede guardado exitosamente",
                                    type: "success",
                                    showConfirmButton: true,
                                }, function () {
                                    window.location = "@Url.Action("Index")";
                                    swal.close();
                                });
                            }
                        },
                        error: function () {
                            swal({
                                title: "Ocurrió un error. Intentelo más tarde",
                                type: "warning",
                                showConfirmButton: true,
                            }, function () {
                                swal.close();
                            });
                        }
                    });
                }
            });
            $("#formularioSede").validate({
                ignore: [],
                errorPlacement: function (error, element) {
                    if ($(element).parent().hasClass("input-group")) {
                        error.insertAfter(element.parent());
                    } else {
                        error.insertAfter(element);
                    }
                },
                rules: {
                    "Nombre": {
                        required: true,
                        maxlength: 50,
                        remote: {
                            url: "@Url.Action("ValidarNombreSede")",
                            type: "POST",
                            data: {
                                nombreSede: function () {
                                    return $("#Nombre").val();
                                }
                            }
                        }
                    },
                    "NroComplejos": {
                        required: true,
                        min: 1,
                        max: 20
                    },
                    "Presupuesto": {
                        required: true,
                        min: 1
                    }
                },
                messages: {
                    Nombre: {
                        required: "Nombre es requerido",
                        maxlength: "Nombre debe ser menor o igual a 50 carácteres",
                        remote: "Ya existe una sede con el mismo nombre"
                    },
                    NroComplejos: {
                        required: "Nro. de complejos es requerido",
                        min: "Nro. de complejos debe se mayor o igual a 1",
                        max: "Nro. de complejos debe ser menor igual a 20"
                    },
                    Presupuesto: {
                        required: "Presupuesto es requerido",
                        min: "Nro. de comisarios debe se mayor o igual a 1",
                    }
                }
            });
        });
    </script>
}

